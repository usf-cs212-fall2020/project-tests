name: Verify Project

on:
  release:
    types:
      - created

env:
  TEST_REPO: 'project-tests'
  MAIN_PATH: 'project/SearchEngine'
  TEST_PATH: 'test/SearchEngineTest'
  RESULT_NAME: 'Verification Failed'
  RESULT_TEXT: 'Unknown error occured.'
  RESULT_TYPE: 'failure'
  RELEASE_NUM: 'Unknown'
  RELEASE_REF: '${{ github.ref }}'

jobs:
  build:
    name: Verify Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v2
        with:
          path: project
          ref: ${{ env.RELEASE_REF }}

      - name: Get Test Repository Status
        uses: actions/github-script@v3
        id: test-repo-status
        with:
          script: |
            return await github.repos.listCommits({
              owner: '${{ github.repository_owner }}',
              repo: '${{ env.TEST_REPO }}',
              per_page: 1
            });

      - name: Cache Test Repository
        id: cache-project-test
        uses: actions/cache@v2
        with:
          path: test
          key: ${{ runner.os }}-test-${{ fromJson(steps.test-repo-status.outputs.result).data[0].sha }}
          restore-keys: |
            ${{ runner.os }}-test-
            ${{ runner.os }}-

      - name: Checkout Test Repository
        if: ${{ steps.cache-project-test.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v2
        with:
          repository: "${{ github.repository_owner }}/${{ env.TEST_REPO }}"
          path: test

      - name: Update Verify Action
        id: update-verify-action
        run: |
          MAIN_ACTION="$(pwd)/project/.github/workflows/verify.yml"
          TEST_ACTION="$(pwd)/test/.github/workflow-templates/verify.yml"

          if cmp -s "${MAIN_ACTION}" "${TEST_ACTION}"; then
            echo "No changes to action detected."
          else
            echo "Change detected in release. Checking main..."
            cd project
            git remote

            git fetch --no-tags --depth=1 origin
            git checkout --track origin/main

            if cmp -s "${MAIN_ACTION}" "${TEST_ACTION}"; then
              echo "No changes to action detected."
              exit 0;
            fi

            RESULT_NAME="Verification Action Requires Update!"
            RESULT_TEXT="Your verification action is out of date. Please update your \".github/workflows/verify.yml\" file with the one provided in the artifacts to continue."
            RESULT_TYPE="failure"

            echo "::set-env name=RESULT_NAME::${RESULT_NAME}"
            echo "::set-env name=RESULT_TEXT::${RESULT_TEXT}"
            echo "::set-env name=RESULT_TYPE::${RESULT_TYPE}"

            echo ""
            echo "::error ::${RESULT_TEXT}"
            exit 1
          fi

      - name: Upload Verification Action
        if: failure() && steps.update-verify-action.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: verify.yml
          path: |
            test/.github/workflow-templates/verify.yml

      - name: Parse Project Release
        run: |
          RELEASE_REF="${{ env.RELEASE_REF }}"
          echo "Tag: ${RELEASE_REF}"

          if [[ ${RELEASE_REF} =~ ^refs/tags/(v([1-4])\.([0-9]+)\.([0-9]+))$ ]]; then
            RELEASE_NUM=${BASH_REMATCH[1]}
            PROJECT_NUM=${BASH_REMATCH[2]}
            VERSION_NUM=${BASH_REMATCH[3]}

            echo "::set-env name=RELEASE_NUM::${RELEASE_NUM}"
            echo "::set-env name=PROJECT_NUM::${PROJECT_NUM}"
            echo "::set-env name=VERSION_NUM::${VERSION_NUM}"

            echo "Project: ${PROJECT_NUM}, Version: ${VERSION_NUM}, Release: ${RELEASE_NUM}, User: ${{ github.actor }}"
          else
            RESULT_NAME="Unexpected Release Format!"
            RESULT_TEXT="The release tag ${RELEASE_REF} in an unexpected format; cannot parse."
            RESULT_TYPE="failure"

            echo "::set-env name=RESULT_NAME::${RESULT_NAME}"
            echo "::set-env name=RESULT_TEXT::${RESULT_TEXT}"
            echo "::set-env name=RESULT_TYPE::${RESULT_TYPE}"

            echo "::error ::${RESULT_TEXT}"
            exit 1
          fi

      - name: Select Project Test
        run: |
          if [[ ${PROJECT_NUM} -eq 3 ]]; then
            if [[ ${VERSION_NUM} -eq 0 ]]; then
              TEST_CLASS="Project3aTest"
            else
              TEST_CLASS="Project3bTest"
            fi
          else
            TEST_CLASS="Project${PROJECT_NUM}Test"
          fi
          echo "Test Class: ${TEST_CLASS}"
          echo "::set-env name=TEST_CLASS::${TEST_CLASS}"

      - name: Setup Java JDK 14
        uses: actions/setup-java@v1
        with:
          java-version: 14

      - name: Cache Maven Repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ env.MAIN_PATH }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup Test Environment
        run: |
          printf "\nConfiguring Test Environment..."
          RESULT_NAME="Configuring Test Environment Failed!"
          RESULT_TEXT="Unable to set up the test environment properly."
          RESULT_TYPE="failure"

          echo "::set-env name=RESULT_NAME::${RESULT_NAME}"
          echo "::set-env name=RESULT_TEXT::${RESULT_TEXT}"
          echo "::set-env name=RESULT_TYPE::${RESULT_TYPE}"

          mkdir -p "${{ env.MAIN_PATH }}/src/test/"
          cp -R "${{ env.TEST_PATH }}/src/test" "${{ env.MAIN_PATH }}/src/"

          ln -s "$(pwd)/${{ env.TEST_PATH }}/expected" "${{ env.MAIN_PATH }}/expected"
          ln -s "$(pwd)/${{ env.TEST_PATH}}/input" "${{ env.MAIN_PATH }}/input"

          printf "\nCode:\n"
          ls -CG "${{ env.MAIN_PATH }}/src/main/java"
          printf "\nTests:\n"
          ls -CG "${{ env.MAIN_PATH }}/src/test/java"
          printf "\nExpected:\n"
          ls -CG "${{ env.MAIN_PATH }}/expected"

      - name: Compile Project Code
        id: compile-main
        working-directory: "${{ env.MAIN_PATH }}"
        run: |
          printf "\nCompiling Main Code...\n"
          RESULT_NAME="Compiling Project Code Failed!"
          RESULT_TEXT="Unable to compile project code without warnings."
          RESULT_TYPE="failure"

          echo "::set-env name=RESULT_NAME::${RESULT_NAME}"
          echo "::set-env name=RESULT_TEXT::${RESULT_TEXT}"
          echo "::set-env name=RESULT_TYPE::${RESULT_TYPE}"

          mvn -ntp -Dmaven.compiler.failOnWarning=true compile
          printf "\nMain Classes:\n"
          ls -CG "target/classes/"

      - name: Compile Test Code
        id: compile-test
        working-directory: "${{ env.MAIN_PATH }}"
        run: |
          printf "\nCompiling Test Code...\n"
          RESULT_NAME="Compiling Test Code Failed!"
          RESULT_TEXT="Unable to compile project test code."
          RESULT_TYPE="failure"

          echo "::set-env name=RESULT_NAME::${RESULT_NAME}"
          echo "::set-env name=RESULT_TEXT::${RESULT_TEXT}"
          echo "::set-env name=RESULT_TYPE::${RESULT_TYPE}"

          mvn -ntp -Dmaven.compiler.failOnWarning=false test-compile
          printf "\nTest Classes:\n"
          ls -CG "target/test-classes/"

      - name: Run Project Tests
        id: run-project-test
        working-directory: "${{ env.MAIN_PATH }}"
        continue-on-error: true
        run: |
          printf "\nRunning Tests...\n"
          RESULT_NAME="ðŸ›‘ Project ${{ env.PROJECT_NUM }} Verification Failed"
          RESULT_TEXT="One or more tests in ${{ env.TEST_CLASS }} for release ${{ env.RELEASE_NUM }} failed. See the attached artifacts for details."
          RESULT_TYPE="failure"

          echo "::set-env name=RESULT_NAME::${RESULT_NAME}"
          echo "::set-env name=RESULT_TEXT::${RESULT_TEXT}"
          echo "::set-env name=RESULT_TYPE::${RESULT_TYPE}"

          mvn -ntp -Dtest="${{ env.TEST_CLASS }}*" test

      - name: Generate Reports
        id: generate-reports
        continue-on-error: true
        working-directory: "${{ env.MAIN_PATH }}"
        if: ${{ success() || steps.compile-test.outcome == 'success' }}
        run: |
          RESULT_NAME="Generating Reports Failed!"
          RESULT_TEXT="Unable to generate test reports."
          RESULT_TYPE="warning"

          echo "::set-env name=RESULT_NAME::${RESULT_NAME}"
          echo "::set-env name=RESULT_TEXT::${RESULT_TEXT}"
          echo "::set-env name=RESULT_TYPE::${RESULT_TYPE}"

          printf "\nGenerating Reports...\n"
          mvn -ntp surefire-report:report-only

      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        continue-on-error: true
        if: ${{ success() || steps.generate-reports.outcome == 'success' }}
        with:
          name: test-reports
          path: |
            ${{ env.MAIN_PATH }}/target/site/*.html
            ${{ env.MAIN_PATH }}/target/surefire-reports/*.txt

      - name: Check Results
        uses: actions/github-script@v3
        if: ${{ always() }}
        with:
          script: |
            let title = '${{ env.RESULT_NAME }}'
            let message = '${{ env.RESULT_TEXT }}'
            let level = '${{ env.RESULT_TYPE }}'
            let conclusion = 'failure'

            if ('${{ steps.run-project-test.outcome }}' == 'success') {
              title = 'ðŸŽ‰ Project ${{ env.PROJECT_NUM }} Verification Passed!'
              message = 'All tests in ${{ env.TEST_CLASS }} for release ${{ env.RELEASE_NUM }} passed!'
              level = 'notice'
              conclusion = 'success'
              console.info(title)
            }
            else {
              console.error(title)
            }

            await github.checks.create({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name,
              name: 'Verify: ${{ env.RELEASE_NUM }}',
              head_sha: context.sha,
              conclusion: conclusion,
              output: {
                title: title,
                summary: message,
                annotations: [
                  {
                     path: '.github',
                     start_line: 1,
                     end_line: 1,
                     annotation_level: level,
                     message: message,
                     title: title
                  }
                ]
              }
            })
